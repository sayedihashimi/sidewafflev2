<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--<UsingTask TaskName="SideWaffleTasks.AddToZipTask"
             AssemblyFile="C:\data\mycode\sidewafflev2\src\SideWafflev2\SideWaffleTasks\bin\Debug\SideWaffleTasks.dll"/>-->

  <PropertyGroup Condition=" '$(ls-msbuildtasks-path)'=='' ">
    <ls-msbuildtasks-path>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(windir)\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(ls-msbuildtasks-path)'=='' ">
    <ls-msbuildtasks-path Condition=" '$(ls-msbuildtasks-path)'=='' or !Exists('$(ls-msbuildtasks-path)') ">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(windir)\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
  </PropertyGroup>
  <UsingTask TaskName="AddToZipTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(ls-msbuildtasks-path)">
    <ParameterGroup>
      <ZipFilePath ParameterType="System.String" Required="true" />
      <FilesToAdd ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <RootFolder ParameterType="System.String" Required="true" />
      <Compression ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Log.LogMessage(MessageImportance.High, "AddToZipTask2 called", null);

            CompressionLevel level = CompressionLevel.Optimal;
            if (!string.IsNullOrWhiteSpace(Compression)) {
                try {
                    CompressionLevel result = (CompressionLevel)Enum.Parse(typeof(CompressionLevel), Compression);
                    level = result;
                }
                catch (Exception ex) {
                    Log.LogWarning("Unable to parse compression level [{0}]. Error [{1}]", Compression, ex.ToString());
                }
            }
            
            using (ZipArchive zip = ZipFile.Open(ZipFilePath, System.IO.Compression.ZipArchiveMode.Update)) {
                Uri rootFolderUri = new Uri(RootFolder);
                // add each input file to the zip
                foreach (var file in FilesToAdd) {
                    // get the relative path of the file to to add
                    string filePath = file.GetMetadata("FullPath");
                    Uri fileUri = new Uri(filePath);
                    string relpath = Uri.UnescapeDataString(
                                            rootFolderUri.MakeRelativeUri(fileUri)
                                                .ToString()
                                                .Replace('/', Path.DirectorySeparatorChar)
                                            );

                    Log.LogMessage("Update zip: [{0}], add file: [{1}], relpath: [{2}]", ZipFilePath, filePath, relpath);

                    var entriesToDelete = new List<ZipArchiveEntry>();
                    // if the file is already in the zip remove it and add again
                    if (zip.Entries != null) {
                        foreach (var entry in zip.Entries) {
                            if (entry.Name.Equals(relpath, StringComparison.OrdinalIgnoreCase)) {
                                entriesToDelete.Add(entry);
                            }
                        }
                    }
                    foreach(var entry in entriesToDelete) {
                        entry.Delete();
                    }

                    ZipFileExtensions.CreateEntryFromFile(zip, filePath, relpath, level);
                }
            }
            return true;
    ]]>
      </Code>
    </Task>
  </UsingTask>  


  <Target Name="MyTarget">
    <Message Text="In mytarget2" Importance="high" />
    <PropertyGroup>
      <_npdNodeXpath>dft:VSTemplate/dft:TemplateContent/dft:CustomParameters/dft:CustomParameter[@Name='SideWaffleNewProjNode']/@Value</_npdNodeXpath>
      <_ls-templateFilePath>%(ls-VsNewProjTemplateFiles.FullPath)</_ls-templateFilePath>
      <ls-VsTemplateXmlSchema Condition=" '$(ls-VsTemplateXmlSchema)'=='' ">http://schemas.microsoft.com/developer/vstemplate/2005</ls-VsTemplateXmlSchema>
    </PropertyGroup>
    <XmlPeek Namespaces="&lt;Namespace Prefix='dft' Uri='$(ls-VsTemplateXmlSchema)'/&gt;"
             XmlInputPath="C:\data\mycode\sidewafflev2\01-basic-template\MyProject.Con\.template.config\AzureFunctions.vstemplate"
             Query="dft:VSTemplate/dft:TemplateContent/dft:CustomParameters/dft:CustomParameter[@Name='SideWaffleNewProjNode']/@Value">
      <Output TaskParameter="Result" PropertyName="_lsResult"/>
    </XmlPeek>
    <Message Text="Result: [$(_lsResult)]" Importance="high" />
  </Target>
</Project>