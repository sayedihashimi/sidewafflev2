<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    1. Find templatepack proj files
    2. Foreach templatepack proj file
       2.1 Call msbuild.exe /t:Pack /p:OutputPath=$(OutputPath)waffles/
       2.2 Find .nupkg files from output path
       2.3 Add .nupkg files to vsix being created
    3. Find .vstemplate files under .template.config folders
    4. Foreach .vstemplate file found
       4.1 Find vs NPD node from new element in .vstemplate file. If not found use default value
       <may not be needed> 4.2 copy the .template.config file to obj/templates/<.vstemplate filename> </may not be needed>
       4.3 create .zip file from items and add to vsix at /output/ProjectTemplates/CSharp/<NPD node path from .vstemplate>/foo.zip
    -->

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)'=='' ">Debug</Configuration>
    <TemplateSourceRoot Condition=" '$(TemplateSourceRoot)'=='' ">$(MSBuildProjectDirectory)\..\</TemplateSourceRoot>
    <TemplateOutputPath Condition=" '$(TemplateOutputPath)'=='' ">bin\$(Configuration)\templates\</TemplateOutputPath>
  </PropertyGroup>

  <!--
        templatepack.proj files go into the TemplatePackNuGetProj item list
    -->
  <ItemGroup>
    <VsTemplateZipDefaultFiles Include="C:\data\mycode\sidewafflev2\project-icon.png"/>
  </ItemGroup>

  <PropertyGroup>
    <ProcessTemplatesDependsOn>
      $(ProcessTemplatesDependsOn);
      BuildTemplateNuGetPackages;
      BuildVsTemplateFiles;
    </ProcessTemplatesDependsOn>
  </PropertyGroup>

  <Target Name="ProcessTemplates"
          DependsOnTargets="$(ProcessTemplatesDependsOn)"
          BeforeTargets="Compile" />

  <!--=====================================================
    Targets related to building/handling the template .nupkg files
    =========================================================-->
  <PropertyGroup>
    <BuildTemplateNuGetPackagesDependsOn>
      $(BuildTemplateNuGetPackagesDependsOn);
      FindTemplatePackProjFiles;
      BuildTemplatePackNuGetProjFiles;
      AddTemplateNuGetPackagesToVsix;
    </BuildTemplateNuGetPackagesDependsOn>
  </PropertyGroup>

  <Target Name="BuildTemplateNuGetPackages" DependsOnTargets="$(BuildTemplateNuGetPackagesDependsOn)" />

  <Target Name="FindTemplatePackProjFiles">
    <!-- Finds files in the project matching templatepack*.proj -->
    <ItemGroup>
      <TemplatePackNuGetProj Include="$(MSBuildProjectDirectory)/**/templatepack*.proj" />
    </ItemGroup>
    <Message Text="Templates in [$(MSBuildProjectDirectory)] found: @(TemplatePackNuGetProj)" Importance="low" />
  </Target>

  <Target Name="BuildTemplatePackNuGetProjFiles"
          Outputs="%(TemplatePackNuGetProj.Identity)">

    <PropertyGroup>
      <_cTemplateProj Condition=" '%(TemplatePackNuGetProj.Identity)' != '' ">%(TemplatePackNuGetProj.Identity)</_cTemplateProj>
      <_cTemplateProj Condition=" '%(TemplatePackNuGetProj.Identity)' != '' ">$([System.IO.Path]::GetFullPath('$(_cTemplateProj)'))</_cTemplateProj>
    </PropertyGroup>
    <Message Text="building template proj: [$(_cTemplateProj)]" Importance="low"/>

    <MSBuild Projects="$(_cTemplateProj)" Targets="Restore" />
    <MSBuild Projects="$(_cTemplateProj)"
             Targets="Pack;GetNuGetPath"
             Properties="Configuration=$(Configuration);TemplateOutputPath=$(TemplateOutputPath);IntermediateOutputPath=c:\temp\foo\bar\"
             Condition=" '$(_cTemplateProj)' != '' ">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="templateOutput" />
    </MSBuild>

    <Message Text="templateOutput: [@(templateOutput)]" Importance="high" />
  </Target>

  <Target Name="AddTemplateNuGetPackagesToVsix">
    <!-- Add the produced .zip files to Content so that they are included in the package -->
    <ItemGroup>
      <_templateNuGetPkgs Include="$(TemplateOutputPath)**/*.nupkg"
                          Exclude="$(TemplateNuGetPackagesToExcludeFromVsix)" />

      <VSIXSourceItem Include="%(_templateNuGetPkgs.Identity)">
        <!-- <VSIXSubPath>%(_ls-ItemTemplatesOutputs.OutputPathFolder)</VSIXSubPath> -->
      </VSIXSourceItem>
    </ItemGroup>
  </Target>

  <!--=====================================================
    Targets relating to converting .vstemplate to a template .zip
    =========================================================-->
  <PropertyGroup>
    <BuildVsTemplateFilesDependsOn>
      $(BuildVsTemplateFilesDependsOn);
      FindVstemplateFiles;
      BuildZipForVstemplateFiles;
    </BuildVsTemplateFilesDependsOn>
  </PropertyGroup>
  <Target Name="BuildVsTemplateFiles" DependsOnTargets="$(BuildVsTemplateFilesDependsOn)" />

  <Target Name="FindVstemplateFiles">
    <Message Text="Looking for .vstemplate files in [$(TemplateSourceRoot)]" Importance="low" />
    <ItemGroup>
      <_vstemplateTemp Include="$(TemplateSourceRoot)**/*.vstemplate" Exclude="$(VsTemplateFilesExclude)" />
      <VsTemplateFiles Include="$([System.IO.Path]::GetFullPath(' %(_vstemplateTemp.Identity) '))" />
    </ItemGroup>
    <Message Text=".vstemplate files found: [@(VsTemplateFiles)]" Importance="low" />
  </Target>

  <Target Name="BuildZipForVstemplateFiles"
          Outputs="%(VsTemplateFiles.Identity)">

    <!--
        1. Add standard icon files to new zip created
        2. Add all files in same dir as .vstemplate to the zip
      -->
    <PropertyGroup>
      <_zipoutfile>$(TemplateOutputPath)$(MSBuildProjectName).zip</_zipoutfile>
      <_ziprootdir>%(VsTemplateZipDefaultFiles.RootDir)%(VsTemplateZipDefaultFiles.Directory)</_ziprootdir>
      <_vstemplatedir>$([System.IO.Path]::GetFullPath('%(VsTemplateFiles.RootDir)%(VsTemplateFiles.Directory)'))</_vstemplatedir>
    </PropertyGroup>

    <Message Text="Making vstemplate zip file at [$(_zipoutfile)]" Importance="high"/>
    <AddToZipTask
      ZipFilePath="$(_zipoutfile)"
      FilesToAdd="@(VsTemplateZipDefaultFiles)"
      RootFolder="$(_ziprootdir)" />

    <ItemGroup>
      <_templatefilestoadd Remove="@(_templatefilestoadd)"/>
      <_templatefilestoadd Include="$(_vstemplatedir)**/*"/>
    </ItemGroup>
    <AddToZipTask
      ZipFilePath="$(_zipoutfile)"
      FilesToAdd="@(_templatefilestoadd)"
      RootFolder="$(_vstemplatedir)"
      Condition=" '@(_templatefilestoadd)' != ' ' "/>
      
    <!-- Add the zip to the vsix being created -->
    <ItemGroup>
      <VSIXSourceItem Include="$(_zipoutfile)">
        <!-- <VSIXSubPath>%(_ls-ItemTemplatesOutputs.OutputPathFolder)</VSIXSubPath> -->
      </VSIXSourceItem>
    </ItemGroup>
  </Target>

  <!--=====================================================
    Inline Tasks
    =========================================================-->
  <PropertyGroup Condition=" '$(ls-msbuildtasks-path)'=='' ">
    <ls-msbuildtasks-path Condition=" '$(ls-msbuildtasks-path)'=='' or !Exists('$(ls-msbuildtasks-path)') ">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
    <ls-msbuildtasks-path Condition=" !Exists('$(ls-msbuildtasks-path)')">$(windir)\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll</ls-msbuildtasks-path>
  </PropertyGroup>
  <UsingTask TaskName="AddToZipTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(ls-msbuildtasks-path)">
    <ParameterGroup>
      <ZipFilePath ParameterType="System.String" Required="true" />
      <FilesToAdd ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <RootFolder ParameterType="System.String" Required="true" />
      <Compression ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Log.LogMessage(MessageImportance.High, "AddToZipTask2 called", null);

            CompressionLevel level = CompressionLevel.Optimal;
            if (!string.IsNullOrWhiteSpace(Compression)) {
                try {
                    CompressionLevel result = (CompressionLevel)Enum.Parse(typeof(CompressionLevel), Compression);
                    level = result;
                }
                catch (Exception ex) {
                    Log.LogWarning("Unable to parse compression level [{0}]. Error [{1}]", Compression, ex.ToString());
                }
            }
            
            using (ZipArchive zip = ZipFile.Open(ZipFilePath, System.IO.Compression.ZipArchiveMode.Update)) {
                Uri rootFolderUri = new Uri(RootFolder);
                // add each input file to the zip
                foreach (var file in FilesToAdd) {
                    // get the relative path of the file to to add
                    string filePath = file.GetMetadata("FullPath");
                    Uri fileUri = new Uri(filePath);
                    string relpath = Uri.UnescapeDataString(
                                            rootFolderUri.MakeRelativeUri(fileUri)
                                                .ToString()
                                                .Replace('/', Path.DirectorySeparatorChar)
                                            );

                    Log.LogMessage("Update zip: [{0}], add file: [{1}], relpath: [{2}]", ZipFilePath, filePath, relpath);

                    var entriesToDelete = new List<ZipArchiveEntry>();
                    // if the file is already in the zip remove it and add again
                    if (zip.Entries != null) {
                        foreach (var entry in zip.Entries) {
                            if (entry.Name.Equals(relpath, StringComparison.OrdinalIgnoreCase)) {
                                entriesToDelete.Add(entry);
                            }
                        }
                    }
                    foreach(var entry in entriesToDelete) {
                        entry.Delete();
                    }

                    ZipFileExtensions.CreateEntryFromFile(zip, filePath, relpath, level);
                }
            }
            return true;
    ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
